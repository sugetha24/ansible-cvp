---
- name: Test cv_device_v3
  hosts: CloudVision
  connection: local
  gather_facts: false
  vars:
    ansible_command_timeout: 1200
    ansible_connect_timeout: 600

    DEVICE_NAME: s1-leaf1

    CONTAINER:
      Test_Leaf:
        parentContainerName: Tenant

    CVP_DEVICES_MOVE_DEVICE:
      - fqdn: "{{DEVICE_NAME}}"
        parentContainerName: Test_Leaf

    CVP_DEVICES_PARENT_CONTAINER_NONE:
      - fqdn: "{{DEVICE_NAME}}"
        parentContainerName: None

    CVP_DEVICES_PROVISIONING_RESET:
      - fqdn: "{{DEVICE_NAME}}"
        parentContainerName: Test_Leaf

    CVP_DEVICES_APPLY_CONFIGLET:
      - fqdn: "{{DEVICE_NAME}}"
        parentContainerName: Undefined
        configlets: "{{CV_FACTS_V3_RESULT.data.cvp_devices[0].configlets}}"

    CVP_DEVICES_VALIDATE_CONFIG:
      - device_name: "{{DEVICE_NAME}}"
        search_type: serialNumber
        cvp_configlets: "{{CV_FACTS_V3_RESULT.data.cvp_devices[0].configlets}}"

    CVP_DEVICES_DEPLOY:
      - fqdn: "{{DEVICE_NAME}}" # device must be in undefined container
        parentContainerName: "{{CV_FACTS_V3_RESULT.data.cvp_devices[0].parentContainerName}}"
        configlets: "{{CV_FACTS_V3_RESULT.data.cvp_devices[0].configlets}}"

    CVP_DEVICES_DETACH_CONFIGLET:
      - fqdn: "{{DEVICE_NAME}}"
        parentContainerName: "{{CV_FACTS_V3_RESULT.data.cvp_devices[0].parentContainerName}}"

  tasks:
    # Creating a container
    - name: Build Container On {{ inventory_hostname }}
      arista.cvp.cv_container_v3:
        topology: "{{ CONTAINER }}"

    - name: Collect devices facts from {{ inventory_hostname }}
      arista.cvp.cv_facts_v3:
        facts:
          - devices
        regexp_filter: "{{ DEVICE_NAME }}"
      register: CV_FACTS_V3_RESULT

    - name: Run CV_DEVICE_V3 To Move Device
      arista.cvp.cv_device_v3:
        devices: "{{ CVP_DEVICES_MOVE_DEVICE }}"
        state: present
      register: MOVE_DEVICE_RUN

    - name: Pause for 10 seconds to Execute Task
      ansible.builtin.pause:
        seconds: 10

    - name: Execute Task for deploy_Device
      arista.cvp.cv_task_v3:
        tasks: "{{ MOVE_DEVICE_RUN.taskIds }}"

    - name: Check Move Device
      ansible.builtin.assert:
        that:
          - MOVE_DEVICE_RUN.devices_moved.changed == true
          - MOVE_DEVICE_RUN.devices_moved.devices_moved_count == 1
          - MOVE_DEVICE_RUN.devices_moved.devices_moved_list == ['s1-leaf1_to_Test_Leaf']
          - MOVE_DEVICE_RUN.devices_moved.success == true
          - MOVE_DEVICE_RUN.failed == false

    - name: Run CV_DEVICE_V3 To Move Device With Parent Container None
      arista.cvp.cv_device_v3:
        devices: "{{ CVP_DEVICES_PARENT_CONTAINER_NONE }}"
        state: present
      ignore_errors: true
      register: MOVE_DEVICE_NONE

    - name: Negative Test Check Move Device With Parent Container None
      ansible.builtin.assert:
        that:
          - MOVE_DEVICE_NONE.msg == "The target container 'None' for the device 's1-leaf1' does not exist on CVP."
          - MOVE_DEVICE_NONE.changed == false
          - MOVE_DEVICE_NONE.failed == true

    - name: Run CV_DEVICE_V3 To Move Device With Parent Container Same
      arista.cvp.cv_device_v3:
        devices: "{{ CVP_DEVICES_MOVE_DEVICE }}"
        state: present
      ignore_errors: true
      register: MOVE_DEVICE

    - name: Negative Test Check Move Device With Same Parent Container
      ansible.builtin.assert:
        that:
          - MOVE_DEVICE.devices_moved.changed == false
          - MOVE_DEVICE.devices_moved.devices_moved_count == 0
          - MOVE_DEVICE.devices_moved.devices_moved_list == []
          - MOVE_DEVICE.devices_moved.success == false
          - MOVE_DEVICE.failed == false
          - MOVE_DEVICE.taskIds: []

    ################################
    #        DEPLOY DEVICE        ##
    ################################

    # moving device to undefined container
    - name: Run CV_DEVICE_V3 With State Provisioning Reset
      arista.cvp.cv_device_v3:
        devices: "{{ CVP_DEVICES_PROVISIONING_RESET }}"
        state: provisioning_reset
      register: PROVISIONING_RESET_RESULT

    - name: Pause for 10 seconds to Execute Task
      ansible.builtin.pause:
        seconds: 10

    - name: Validate configurations
      arista.cvp.cv_validate_v3:
        devices: "{{ CVP_DEVICES_VALIDATE_CONFIG }}"
        validate_mode: stop_on_error
      register: CVP_DEVICES_RESULTS

    - name: Resetting original state for device {{ DEVICE_NAME }}
      arista.cvp.cv_device_v3:
        devices: "{{ CVP_DEVICES_DEPLOY }}"
        state: present
      register: CV_DEVICE_V3_RESULT

    - name: Checking if the reset was successful
      ansible.builtin.assert:
        that:
          - CV_DEVICE_V3_RESULT.changed == true
          - CV_DEVICE_V3_RESULT.devices_deployed.changed == true
          - CV_DEVICE_V3_RESULT.devices_deployed.devices_deployed_count == 1
          - CV_DEVICE_V3_RESULT.devices_deployed.devices_deployed_list == ["s1-leaf1_deployed"]
          - CV_DEVICE_V3_RESULT.devices_deployed.success == true
          - CV_DEVICE_V3_RESULT.devices_deployed.taskIds != []

    - name: Execute Task for deploy_Device
      arista.cvp.cv_task_v3:
        tasks:
          - "{{ CV_DEVICE_V3_RESULT.devices_deployed.taskIds[0] }}"
      when: CVP_DEVICES_RESULTS.success is true

    - name: Remove Container
      arista.cvp.cv_container_v3:
        topology: "{{ CONTAINER }}"
        state: absent
